name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write
  packages: write

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v5

    - name: Set up Go
      uses: actions/setup-go@v6
      with:
        go-version: 1.23

    - name: Run tests
      run: go test -v ./...

  build-and-release:
    needs: test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - goos: linux
            goarch: amd64
            suffix: linux-amd64
          - goos: linux
            goarch: arm64
            suffix: linux-arm64
          - goos: darwin
            goarch: amd64
            suffix: darwin-amd64
          - goos: darwin
            goarch: arm64
            suffix: darwin-arm64
          - goos: windows
            goarch: amd64
            suffix: windows-amd64.exe

    steps:
    - uses: actions/checkout@v5

    - name: Set up Go
      uses: actions/setup-go@v6
      with:
        go-version: 1.23

    - name: Get version from tag
      id: version
      run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

    - name: Build binary
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
        CGO_ENABLED: 0
      run: |
        go build -ldflags="-s -w -X 'main.version=${{ steps.version.outputs.VERSION }}'" \
          -o elasticdump-${{ matrix.suffix }} main.go

    - name: Create archive
      run: |
        if [[ "${{ matrix.goos }}" == "windows" ]]; then
          zip elasticdump-${{ steps.version.outputs.VERSION }}-${{ matrix.suffix }}.zip elasticdump-${{ matrix.suffix }}
        else
          tar -czf elasticdump-${{ steps.version.outputs.VERSION }}-${{ matrix.suffix }}.tar.gz elasticdump-${{ matrix.suffix }}
        fi

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: elasticdump-${{ matrix.suffix }}
        path: |
          elasticdump-${{ steps.version.outputs.VERSION }}-${{ matrix.suffix }}.*

  create-release:
    needs: build-and-release
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v5
      with:
        fetch-depth: 0

    - name: Get version from tag
      id: version
      run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

    - name: Download all artifacts
      uses: actions/download-artifact@v5
      with:
        path: ./artifacts

    - name: Generate changelog
      id: changelog
      run: |
        if git describe --tags --abbrev=0 HEAD^ >/dev/null 2>&1; then
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^)
          echo "CHANGELOG<<EOF" >> $GITHUB_OUTPUT
          echo "## Changes since $PREVIOUS_TAG" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          git log --pretty=format:"- %s (%h)" $PREVIOUS_TAG..HEAD >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
        else
          echo "CHANGELOG=Initial release" >> $GITHUB_OUTPUT
        fi

    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ steps.version.outputs.VERSION }}
        name: Release ${{ steps.version.outputs.VERSION }}
        body: |
          # elasticdump ${{ steps.version.outputs.VERSION }}
          
          ${{ steps.changelog.outputs.CHANGELOG }}
          
          ## Installation
          
          Download the appropriate binary for your platform from the assets below.
          
          ### Linux/macOS
          ```bash
          # Download and extract
          tar -xzf elasticdump-${{ steps.version.outputs.VERSION }}-linux-amd64.tar.gz
          chmod +x elasticdump-linux-amd64
          sudo mv elasticdump-linux-amd64 /usr/local/bin/elasticdump
          ```
          
          ### Windows
          Download the `.zip` file and extract `elasticdump-windows-amd64.exe`.
          
          ## Usage
          ```bash
          elasticdump --help
          ```
        files: |
          artifacts/*/*
        draft: false
        prerelease: false
        generate_release_notes: true

  # docker:
  #   needs: test
  #   runs-on: ubuntu-latest
  #   steps:
  #   - uses: actions/checkout@v5

  #   - name: Set up Docker Buildx
  #     uses: docker/setup-buildx-action@v3

  #   - name: Log in to GitHub Container Registry
  #     uses: docker/login-action@v3
  #     with:
  #       registry: ghcr.io
  #       username: ${{ github.repository_owner }}
  #       password: ${{ secrets.GITHUB_TOKEN }}

  #   - name: Get version from tag
  #     id: version
  #     run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

  #   - name: Build and push Docker image
  #     uses: docker/build-push-action@v5
  #     with:
  #       context: .
  #       platforms: linux/amd64,linux/arm64
  #       push: true
  #       tags: |
  #         ghcr.io/${{ github.repository }}:latest
  #         ghcr.io/${{ github.repository }}:${{ steps.version.outputs.VERSION }}
  #       cache-from: type=gha
  #       cache-to: type=gha,mode=max
